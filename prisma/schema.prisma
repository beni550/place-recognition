// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// משתמשים
model User {
  id            String      @id @default(uuid())
  username      String      @unique
  email         String      @unique
  password      String
  fullName      String
  profileImage  String?
  bio           String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // קשרים
  experiences   Experience[]
  comments      Comment[]
  likes         Like[]
  
  // חברים
  followedBy    Follow[]    @relation("Follower")
  following     Follow[]    @relation("Following")
}

// חוויות
model Experience {
  id            String      @id @default(uuid())
  placeName     String
  type          String
  location      String
  latitude      Float?
  longitude     Float?
  description   String
  tips          String
  rating        Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // קשרים
  creatorId     String
  creator       User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  images        Image[]
  comments      Comment[]
  likes         Like[]
}

// תמונות
model Image {
  id            String      @id @default(uuid())
  url           String
  path          String      // נתיב פיזי לתמונה
  isFeatured    Boolean     @default(false)
  createdAt     DateTime    @default(now())

  // קשרים
  experienceId  String
  experience    Experience  @relation(fields: [experienceId], references: [id], onDelete: Cascade)
}

// תגובות
model Comment {
  id            String      @id @default(uuid())
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // קשרים
  commenterId   String
  commenter     User        @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  experienceId  String
  experience    Experience  @relation(fields: [experienceId], references: [id], onDelete: Cascade)
}

// לייקים
model Like {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())

  // קשרים
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  experienceId  String
  experience    Experience  @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  // כל משתמש יכול לעשות לייק רק פעם אחת לכל חוויה
  @@unique([userId, experienceId])
}

// מערכת חברים/עוקבים
model Follow {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())

  // קשרים
  followerId    String
  follower      User        @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId   String
  following     User        @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  // כל משתמש יכול לעקוב אחרי משתמש אחר רק פעם אחת
  @@unique([followerId, followingId])
}
